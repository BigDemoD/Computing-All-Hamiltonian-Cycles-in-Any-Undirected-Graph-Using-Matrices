Full Permutation and Hamiltonian Circuit Algorithms
1. Full Permutation Matrix Recursive Algorithm
1.1 Algorithm Overview
‌Initialization‌: Start with a 1×1 matrix initialized to 1 (base case for single-digit permutations). 
‌Matrix Construction‌ (for n elements): 
1.Slice the full permutation result matrix of n elements by iteratively removing the leftmost column and inserting it downward, forming a ‌quasi-upper triangular matrix‌. 
2.Rotate this matrix 180° to create a ‌quasi-lower triangular matrix‌. 
3.Merge these with a diagonal matrix of width n! to generate the result for n+1 elements.

Figure 1: Matrix slicing and merging steps.
1.2 Key Properties
1.‌Rotation Invariance‌: The matrix remains unchanged after 180° rotation. 
2.‌Backward Deduction‌: Extract (n-1)-digit permutation matrices from the top-right/bottom-left corner of the n-digit matrix.

Figure 4: Backward deduction illustration.
‌Time Complexity‌: 
oForward computation: O(n²) 
oBackward deduction: O(1)

2. Hamiltonian Circuit Algorithm
2.1 Connection to Full Permutation
In a complete undirected graph with n vertices, all Hamiltonian circuits are derived from the ‌upper half‌ of the (n-1)-digit permutation matrix combined with vertex n. 
Total Hamiltonian circuits: (n-1)! / 2

Figure 5: Hamiltonian circuits for a 4-vertex graph.
2.2 Algorithm Steps
1.
‌Identify Missing Paths‌: 
2.
oCompare the target graph G = (N, V) with a complete graph to define missing paths (V₁) and vertices (N₁).
3.
‌Transition Matrix Calculation‌: 
4.
oFor a vertex s ∈ N₁: 
Subtract s from the upper half of the (n-1)! × n permutation matrix and booleanize to get T₁. 
Repeat column-wise to generate T₂. 
Transition matrix: T = T₁ · T₂.

Figure 6: Transition matrix for vertex 1.
5.
‌Path Vector Derivation‌: 
6.
oFor a missing path f(s, d): 
Multiply transition matrices of s and d, reverse, and reduce columns to get vector A. 
Compute C = A - B (where B is a vector of 4s), then booleanize Cᵀ to obtain row vector D. 
Use D to identify Hamiltonian circuits missing path f.

Figure 8: Path vector for missing edge 1_3.
7.
‌Multiple Missing Paths‌: 
8.
oCombine row vectors of all paths in V₁ and reduce via row-wise binary multiplication.

Figure 10: Result for multiple missing paths.

